########################################
#  GLOBAL OPTIONS
########################################
{
    # E-mail for ACME renewal notices
    email you@example.com

    # Real client IPs even when Cloudflare is in front
    servers {
        trusted_proxies cloudflare
        client_ip_headers CF-Connecting-IP X-Forwarded-For
    }
}

########################################
#  MACROS (re-usable snippets)
########################################

# 1) Cloudflare headers (import wherever you reverse-proxy)
(cf_headers) {
    header_up X-Real-IP        {http.request.header.CF-Connecting-IP}
    header_up X-Forwarded-For  {http.request.header.CF-Connecting-IP}
    header_up CF-Connecting-IP {http.request.header.CF-Connecting-IP}
}

# 2) Coraza WAF (full OWASP Core Rule Set, blocking mode)
(waf) {
    order coraza_waf first          # must run before anything else!
    coraza_waf {
        load_owasp_crs
        directives `
          Include @coraza.conf-recommended
          Include @crs-setup.conf.example
          Include @owasp_crs/*.conf
          SecRuleEngine On          # "On" = detect + block (403)
        `
    }
}

# 3) Auth portal (login UI + TOTP)
(auth_portal) {
    auth_portal {
        path /                         # portal lives at /
        ui {
            title "Secure Login"
            theme basic
        }

        # Single backend = local JSON file stored in /data/users.json
        backends {
            local {
                method local
                path   /data/users.json
                realm  local
            }
        }

        # Google-Authenticator / Authy compatible TOTP
        totp {
            issuer "My-Apps"
            period 30   # seconds
            skew   1    # ±1 period allowed
        }
    }
}

# 4) Require authentication macro
(require_auth) {
    route * {
        authenticate {
            primary yes        # 401 if not logged-in
        }
    }
}

########################################
#  SITES
########################################

# --- 4a  The portal itself --------------------------------
auth.example.com {
    import auth_portal
    # Nothing else here – Caddy serves the UI itself
}

# --- 4b  A protected backend ------------------------------
https://private.example.com {
    import waf
    import require_auth
    reverse_proxy http://172.29.100.61:80 {
        import cf_headers
    }
}

# --- 4c  A public site that still gets WAF ----------------
https://blog.example.com {
    import waf
    reverse_proxy http://172.29.100.62:80 {
        import cf_headers
    }
}

# --- 4d  Catch-all block (optional hard fail) -------------
:80, :443 {
    respond "Connection refused" 403
}
